// Sistema de fundo do jogo
class GameBackground {
    constructor() {
        this.container = document.getElementById('gameBackground');
        this.cells = [];
        this.cellTypes = [
            { size: 'small', weight: 60, minSize: 6, maxSize: 12 },
            { size: 'medium', weight: 25, minSize: 20, maxSize: 35 },
            { size: 'large', weight: 10, minSize: 40, maxSize: 60 },
            { size: 'huge', weight: 4, minSize: 65, maxSize: 85 },
            { size: 'virus', weight: 1, minSize: 35, maxSize: 35 }
        ];
        this.colors = ['cell-color-1', 'cell-color-2', 'cell-color-3', 'cell-color-4', 
                      'cell-color-5', 'cell-color-6', 'cell-color-7', 'cell-color-8'];
        this.init();
    }

    init() {
        this.createInitialCells();
        this.startCellGeneration();
        this.startConsumptionSimulation();
    }

    createInitialCells() {
        // Criar células iniciais espalhadas pela tela
        for (let i = 0; i < 25; i++) {
            this.createCell(Math.random() * window.innerWidth);
        }
    }

    getCellType() {
        const random = Math.random() * 100;
        let accumulated = 0;
        
        for (let type of this.cellTypes) {
            accumulated += type.weight;
            if (random <= accumulated) {
                return type;
            }
        }
        return this.cellTypes[0];
    }

    createCell(startX = -100) {
        const cellType = this.getCellType();
        const cell = document.createElement('div');
        
        const size = Math.random() * (cellType.maxSize - cellType.minSize) + cellType.minSize;
        const yPosition = Math.random() * (window.innerHeight - size);
        const speed = Math.random() * 10 + 5; // velocidade entre 5 e 15 segundos
        
        cell.className = `game-cell ${cellType.size}-cell`;
        
        if (cellType.size === 'virus') {
            cell.classList.add('virus-cell');
        } else {
            const colorClass = this.colors[Math.floor(Math.random() * this.colors.length)];
            cell.classList.add(colorClass);
            
            // Adicionar nome para células maiores
            if (cellType.size === 'large' || cellType.size === 'huge') {
                const names = ['Player', 'Bot', 'AI', 'Pro', 'Noob', 'King', 'Queen', 'Master'];
                cell.textContent = names[Math.floor(Math.random() * names.length)];
            }
        }
        
        cell.style.width = `${size}px`;
        cell.style.height = `${size}px`;
        cell.style.left = `${startX}px`;
        cell.style.top = `${yPosition}px`;
        cell.style.animationDuration = `${speed}s`;
        cell.style.animationDelay = `${Math.random() * 2}s`;
        
        this.container.appendChild(cell);
        this.cells.push({
            element: cell,
            size: size,
            type: cellType.size,
            x: startX,
            y: yPosition
        });

        // Remover célula quando sair da tela
        setTimeout(() => {
            if (cell.parentNode) {
                this.container.removeChild(cell);
                this.cells = this.cells.filter(c => c.element !== cell);
            }
        }, (speed + 2) * 1000);
    }

    startCellGeneration() {
        setInterval(() => {
            if (this.cells.length < 30) {
                this.createCell();
            }
        }, Math.random() * 2000 + 1000); // Entre 1-3 segundos
    }

    startConsumptionSimulation() {
        setInterval(() => {
            // Simular consumo de células pequenas
            const smallCells = this.cells.filter(c => c.type === 'small');
            if (smallCells.length > 0 && Math.random() < 0.3) {
                const randomCell = smallCells[Math.floor(Math.random() * smallCells.length)];
                randomCell.element.classList.add('consuming');
                
                setTimeout(() => {
                    if (randomCell.element.parentNode) {
                        this.container.removeChild(randomCell.element);
                        this.cells = this.cells.filter(c => c.element !== randomCell.element);
                    }
                }, 500);
            }
        }, 3000);
    }
}

// Variável global para dificuldade selecionada
let selectedDifficulty = 'easy';

// Inicializar o fundo do jogo
let gameBackground;
document.addEventListener('DOMContentLoaded', function() {
    gameBackground = new GameBackground();
    setupDifficultyButtons();
    setupModeButtons();
});

// Configurar botões de dificuldade
function setupDifficultyButtons() {
    document.querySelectorAll('.difficulty-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.difficulty-btn').forEach(b => b.classList.remove('selected'));
            this.classList.add('selected');
            selectedDifficulty = this.dataset.diff;
            console.log('Dificuldade selecionada:', selectedDifficulty);
        });
    });
}

// Configurar botões de modo
function setupModeButtons() {
    document.querySelectorAll('.mode-btn').forEach(btn => {
        btn.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px) scale(1.05)';
        });
        
        btn.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
}

// Função global para iniciar o jogo (conecta com main.js)
function startGame() {
    console.log('Iniciando jogo na dificuldade:', selectedDifficulty);
    
    // Esta função será interceptada pelo main.js quando carregado
    if (window.gameMain && window.gameMain.startGame) {
        window.gameMain.startGame(selectedDifficulty);
    } else {
        // Fallback caso main.js não esteja carregado
        alert(`Iniciando jogo na dificuldade: ${selectedDifficulty.toUpperCase()}`);
    }
}

// Simulação de atualização de players online
function updateOnlineCount() {
    const countElements = document.querySelectorAll('.online-count');
    const newCount = Math.floor(Math.random() * 300) + 1000;
    countElements.forEach(el => el.textContent = newCount.toLocaleString());
}

// Atualiza a cada 30 segundos
setInterval(updateOnlineCount, 30000);

// Exportar para uso do main.js
window.menuSystem = {
    getSelectedDifficulty: () => selectedDifficulty,
    hideMenu: () => document.querySelector('.container').style.display = 'none',
    showMenu: () => document.querySelector('.container').style.display = 'block'
};
