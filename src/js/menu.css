// ========================================
// AGAR MOBILE - MAIN.JS
// Entry point e orquestração do jogo
// ========================================

import { setDifficultyByName, getDifficulty } from './difficulty.js';
import { view, state, fit, reset, ui, startPane, overPane, minimapWrap, mobileBtns } from './state.js';
import { now } from './utils.js';
import { movePlayer, splitPlayer, ejectMass, maybeMerge, separatePlayerCells } from './player.js';
import { updateEnemyAI, moveEnemyAI } from './ai.js';
import { 
    createParticles, 
    updateParticles, 
    updatePelletPhysics, 
    updateRage, 
    runEnemyInteractions, 
    updateCamera 
} from './systems.js';
import { render, drawMini } from './render.js';

// ========================================
// INICIALIZAÇÃO
// ========================================

// Configurar dificuldade padrão
setDifficultyByName('normal');

// Ajustar canvas ao tamanho da janela
fit();
window.addEventListener('resize', fit);

// ========================================
// CONTROLES E INPUT
// ========================================

let lastTap = 0;
let moveTarget = null;

// Converter coordenadas de tela para mundo
function screenToWorld(screenX, screenY) {
    const cam = state.camera;
    const worldX = (screenX - view.W / 2) / cam.zoom + cam.x;
    const worldY = (screenY - view.H / 2) / cam.zoom + cam.y;
    return { x: worldX, y: worldY };
}

// Touch controls
view.canvas.addEventListener('touchstart', e => {
    e.preventDefault();
    const now = Date.now();
    const touch = e.touches[0];
    const rect = view.canvas.getBoundingClientRect();
    const screenX = touch.clientX - rect.left;
    const screenY = touch.clientY - rect.top;
    
    state.moveTarget = screenToWorld(screenX, screenY);
    
    // Duplo toque = split
    if (now - lastTap < 300) {
        splitPlayer();
    }
    lastTap = now;
}, { passive: false });

view.canvas.addEventListener('touchmove', e => {
    e.preventDefault();
    const touch = e.touches[0];
    const rect = view.canvas.getBoundingClientRect();
    const screenX = touch.clientX - rect.left;
    const screenY = touch.clientY - rect.top;
    state.moveTarget = screenToWorld(screenX, screenY);
}, { passive: false });

// Mouse controls (para desktop)
let mouseDown = false;

view.canvas.addEventListener('mousedown', e => {
    mouseDown = true;
    const rect = view.canvas.getBoundingClientRect();
    const screenX = e.clientX - rect.left;
    const screenY = e.clientY - rect.top;
    state.moveTarget = screenToWorld(screenX, screenY);
});

view.canvas.addEventListener('mousemove', e => {
    if (mouseDown) {
        const rect = view.canvas.getBoundingClientRect();
        const screenX = e.clientX - rect.left;
        const screenY = e.clientY - rect.top;
        state.moveTarget = screenToWorld(screenX, screenY);
    }
});

view.canvas.addEventListener('mouseup', () => {
    mouseDown = false;
});

// Duplo clique = split
view.canvas.addEventListener('dblclick', () => {
    splitPlayer();
});

// Botões mobile
if (mobileBtns.split) {
    mobileBtns.split.addEventListener('click', () => {
        splitPlayer();
    });
}

if (mobileBtns.eject) {
    mobileBtns.eject.addEventListener('click', () => {
        ejectMass();
    });
}

// Prevenir scroll durante o jogo
document.body.addEventListener('touchmove', e => {
    if (state.gameRunning) {
        e.preventDefault();
    }
}, { passive: false });

// ========================================
// CONTROLES DE DIFICULDADE
// ========================================

// Conectar botões de dificuldade do menu com o sistema
document.querySelectorAll('.difficulty-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        const difficulty = btn.dataset.diff;
        if (difficulty) {
            setDifficultyByName(difficulty);
            console.log('Dificuldade alterada para:', difficulty);
        }
    });
});

// ========================================
// FLUXO DO JOGO
// ========================================

function startGame() {
    console.log('Iniciando jogo...');
    
    // Obter dificuldade selecionada
    const difficulty = getDifficulty();
    console.log('Dificuldade atual:', difficulty);
    
    // Esconder menu e mostrar UI do jogo
    if (window.menuSystem) {
        window.menuSystem.hideMenu();
    }
    
    startPane.style.display = 'none';
    ui.style.display = 'block';
    minimapWrap.style.display = 'block';
    mobileBtns.container.style.display = 'flex';
    
    // Reset do jogo com configurações da dificuldade
    reset({
        enemyCount: difficulty.enemyCount,
        foodCount: difficulty.foodCount,
        initialRage: difficulty.initialRage
    });
    
    state.gameRunning = true;
    
    // Iniciar loop
    loop();
}

function gameOver() {
    state.gameRunning = false;
    
    // Mostrar tela de game over
    overPane.style.display = 'flex';
    
    // Atualizar score final
    const finalScoreEl = overPane.querySelector('#finalScore');
    if (finalScoreEl) {
        finalScoreEl.textContent = Math.floor(state.score);
    }
}

function restartGame() {
    overPane.style.display = 'none';
    
    // Voltar para o menu
    if (window.menuSystem) {
        window.menuSystem.showMenu();
    }
    
    startPane.style.display = 'flex';
    ui.style.display = 'none';
    minimapWrap.style.display = 'none';
    mobileBtns.container.style.display = 'none';
}

// Conectar botões de UI
const startBtn = document.querySelector('.mode-solo');
if (startBtn) {
    startBtn.addEventListener('click', startGame);
}

const restartBtn = overPane.querySelector('#restartBtn, .restart-btn');
if (restartBtn) {
    restartBtn.addEventListener('click', restartGame);
}

// ========================================
// GAME LOOP
// ========================================

function update() {
    if (!state.gameRunning) return;
    
    const dt = 16; // ~60fps
    
    // 1. Player
    movePlayer();
    separatePlayerCells();
    maybeMerge();
    
    // 2. Sistemas
    updateRage();
    updateParticles();
    updatePelletPhysics();
    
    // 3. IA
    state.enemies.forEach(e => {
        updateEnemyAI(e);
        moveEnemyAI(e);
    });
    
    // 4. Interações
    runEnemyInteractions();
    
    // 5. Câmera
    updateCamera();
    
    // 6. HUD
    updateHUD();
}

function updateHUD() {
    // Score
    const scoreEl = ui.querySelector('#score, .score-value');
    if (scoreEl) {
        scoreEl.textContent = Math.floor(state.score);
    }
    
    // Massa total
    const massEl = ui.querySelector('#mass, .mass-value');
    if (massEl) {
        const totalMass = state.player.mass + 
            state.player.splitBalls.reduce((sum, b) => sum + b.mass, 0);
        massEl.textContent = Math.floor(totalMass);
    }
    
    // Rage mode
    const rageEl = ui.querySelector('#rage, .rage-indicator');
    if (rageEl) {
        if (state.player.rageMode && state.player.rageEnd > now()) {
            const timeLeft = Math.ceil((state.player.rageEnd - now()) / 1000);
            rageEl.textContent = `RAGE: ${timeLeft}s`;
            rageEl.style.display = 'block';
        } else {
            rageEl.style.display = 'none';
        }
    }
}

function loop() {
    if (!state.gameRunning) return;
    
    update();
    render();
    drawMini();
    
    requestAnimationFrame(loop);
}

// ========================================
// EXPORTAR PARA MENU
// ========================================

// Disponibilizar função para o menu.js
window.gameMain = {
    startGame: startGame
};

// ========================================
// INICIALIZAÇÃO FINAL
// ========================================

console.log('Agar Mobile carregado!');
console.log('Pressione JOGAR SOZINHO para começar');
